<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Consent Form</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        margin: 0;
        background-color: #f4f4f4;
      }
      .form-container {
        background: white;
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        max-width: 600px;
        width: 100%;
        text-align: center;
      }
      h1 {
        font-size: 1.8em;
        margin-bottom: 20px;
        color: #333;
      }
      p {
        text-align: left;
        font-size: 1em;
        margin-bottom: 20px;
        line-height: 1.6;
      }
      label {
        font-size: 1.1em;
        margin-bottom: 10px;
        font-weight: bold;
        display: block;
      }
      input[type="checkbox"] {
        margin-right: 10px;
      }
      .button-container {
        margin-top: 20px;
      }
      button {
        width: 100%;
        padding: 12px;
        font-size: 1.1em;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-bottom: 10px;
      }
      button:hover {
        background-color: #0056b3;
      }
      button:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
      }
      /* Error message styling */
      .error-message {
        background: #f8d7da;
        color: #721c24;
        padding: 10px;
        border-radius: 4px;
        margin: 10px 0;
        border: 1px solid #f5c6cb;
      }
      /* Loading state */
      .loading {
        opacity: 0.6;
        pointer-events: none;
      }
    </style>
  </head>
  <body>
    <div class="form-container">
      <h1>Consent Form</h1>
      <p>
        Thank you for participating in our research study. Please carefully read
        the information below before proceeding:
      </p>
      <p>
        By agreeing to participate, you consent to the collection of data for
        research purposes. Your responses will be kept confidential and used
        solely for academic purposes. Participation is voluntary, and you may
        withdraw at any time without penalty.
      </p>
      <p>Please download and review the consent form below:</p>
      <h1>Download Consent Form</h1>
      <a href="Informed Consent.pdf" download="Informed Consent.pdf"
        >Click to download file</a
      >

      <p>By clicking the checkbox below, you confirm that you have:</p>
      <ol>
        <li>
          You have signed a physical consent form or a consent form emailed to
          you, which you have returned to the researcher.
        </li>
        <li>
          By clicking the checkbox, you are electronically signing this consent
          form. Your action constitutes a digital signature, which has the same
          legal effect as a handwritten signature on a physical consent form.
        </li>
      </ol>
      
      <form id="consent-form">
        <label>
          <input type="checkbox" id="consent" required />
          I have read and understood the above information and consent to
          participate.
        </label>

        <div class="button-container">
          <button type="button" id="next-button" onclick="handleConsentSubmission()">
            Go to next page
          </button>
        </div>
      </form>
    </div>

    <!-- Import our shared utilities -->
    <script src="../../utils/common.js"></script>
    
    <script>
      // Initialize when page loads (like Python's if __name__ == "__main__")
      window.addEventListener('load', function() {
        console.log('Consent page loaded');
        initializePage();
      });

      function initializePage() {
        try {
          // Create or get user ID using our secure utility
          const userId = SecureCookieManager.getOrCreateUserId();
          console.log('User ID initialized:', userId);
        } catch (error) {
          console.error('Failed to initialize user ID:', error);
          FormValidator.showError('Failed to initialize session. Please refresh the page.');
        }
      }

      async function handleConsentSubmission() {
        // Get form elements
        const consentCheckbox = document.getElementById('consent');
        const nextButton = document.getElementById('next-button');
        const form = document.getElementById('consent-form');

        // Validate consent checkbox
        if (!consentCheckbox.checked) {
          FormValidator.showError('You must provide consent before proceeding to the next page!');
          return;
        }

        try {
          // Disable button and show loading state (prevent double-clicks)
          nextButton.disabled = true;
          nextButton.textContent = 'Processing...';
          form.classList.add('loading');

          // Get user ID
          const userId = SecureCookieManager.getOrCreateUserId();
          if (!userId) {
            throw new Error('Unable to get user ID');
          }

          // Upload consent data
          await uploadConsentData(userId);
          
          // Upload start time metadata
          await uploadStartTime(userId);

          // Show success message
          console.log('✅ All data uploaded successfully');
          
          // Navigate to next page
          NavigationManager.navigateWithUserId('demographics.html', userId);

        } catch (error) {
          console.error('❌ Consent submission failed:', error);
          FormValidator.showError('Failed to submit consent. Please try again.');
          
          // Re-enable button
          nextButton.disabled = false;
          nextButton.textContent = 'Go to next page';
          form.classList.remove('loading');
        }
      }

      async function uploadConsentData(userId) {
        console.log('Uploading consent data...');
        
        const consentData = {
          consented: "Yes",
          timestamp: new Date().toISOString(),
          userAgent: navigator.userAgent,
          url: window.location.href
        };

        const jsonBlob = new Blob([JSON.stringify(consentData, null, 2)], {
          type: "application/json",
        });

        const fileName = `${userId}_consent.json`;
        
        try {
          const result = await APIClient.uploadFile(jsonBlob, fileName, userId);
          console.log('✅ Consent data uploaded:', result.fileName);
          return result;
        } catch (error) {
          console.error('❌ Consent upload failed:', error);
          throw new Error('Failed to upload consent data');
        }
      }

      async function uploadStartTime(userId) {
        console.log('Uploading start time metadata...');
        
        const startTimeData = {
          start_timestamp: new Date().toISOString(),
          timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
          session_id: userId
        };

        const jsonBlob = new Blob([JSON.stringify(startTimeData, null, 2)], {
          type: "application/json",
        });

        const fileName = `${userId}_start_time.json`;
        
        try {
          const result = await APIClient.uploadFile(jsonBlob, fileName, userId);
          console.log('✅ Start time uploaded:', result.fileName);
          return result;
        } catch (error) {
          console.error('❌ Start time upload failed:', error);
          throw new Error('Failed to upload start time');
        }
      }

      // Error handling for unhandled promise rejections (like Python's uncaught exceptions)
      window.addEventListener('unhandledrejection', function(event) {
        console.error('Unhandled promise rejection:', event.reason);
        FormValidator.showError('An unexpected error occurred. Please refresh the page and try again.');
      });

      // Error handling for JavaScript errors
      window.addEventListener('error', function(event) {
        console.error('JavaScript error:', event.error);
        FormValidator.showError('An unexpected error occurred. Please refresh the page and try again.');
      });
    </script>
  </body>
</html>
